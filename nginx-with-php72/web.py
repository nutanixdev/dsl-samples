# THIS FILE IS AUTOMATICALLY GENERATED.
"""
Calm DSL for Nginx With PHP 7.2
This file is a replica of the sample blueprint.py generated when running
the HelloBlueprint sample commands
"""

import os

from calm.dsl.builtins import Service, Package, Substrate
from calm.dsl.builtins import Deployment, Profile, Blueprint
from calm.dsl.builtins import CalmVariable as Variable
from calm.dsl.builtins import CalmTask as Task
from calm.dsl.builtins import action, ref, basic_cred
from calm.dsl.builtins import read_local_file
from calm.dsl.builtins import vm_disk_package, AhvVmDisk, AhvVmNic
from calm.dsl.builtins import AhvVmGC, AhvVmResources, AhvVm


# use the locally-stored private and public key files to generate
# an SSH-based credential
# this credential will be used as the default credential within the blueprint
CENTOS_USER = "centos"
CENTOS_KEY = read_local_file(os.path.join("keys", "centos_priv"))
CENTOS_PUBLIC_KEY = read_local_file(os.path.join("keys", "centos_pub"))
CentosCred = basic_cred(
    CENTOS_USER, CENTOS_KEY, name="Centos", type="KEY", default=True,
)


# all services/VMs within this blueprint will be built from the same disk image
# by using a "Configuration" image, Calm will download the image from the qcow2
# URL below, if an image with an identical name does not already exist
CENTOS_IMAGE_SOURCE = "http://download.nutanix.com/calm/CentOS-7-x86_64-1810.qcow2"
CentosPackage = vm_disk_package(
    name="centos_disk", config={"image": {"source": CENTOS_IMAGE_SOURCE}},
)


class NginxService(Service):
    """Nginx Service"""

    # Service Actions
    @action
    def __create__():
        # Step 1
        Task.Exec.ssh(name="ConfigureBaseVM",
                      filename="scripts/ConfigureBaseVM.sh")
        Task.Exec.ssh(name="InstallNginx",
                      filename="scripts/InstallNginx.sh")
        Task.Exec.ssh(name="ConfigureNginx",
                      filename="scripts/ConfigureNginx.sh")
        Task.Exec.ssh(name="ConfigurePHP",
                      filename="scripts/ConfigurePHP.sh")
        Task.Exec.ssh(name="InstallPHPComposer",
                      filename="scripts/InstallPHPComposer.sh")
        Task.Exec.ssh(name="ConfigureFirewall",
                      filename="scripts/ConfigureFirewall.sh")
        Task.Exec.ssh(name="CreateSite",
                      filename="scripts/CreateSite.sh")


class NginxPackage(Package):
    """Nginx Package"""

    # Services created by installing this Package
    services = [ref(NginxService)]


class NginxVmResources(AhvVmResources):

    memory = 1
    vCPUs = 1
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(CentosPackage,
                                                   bootable=True),
    ]
    nics = [AhvVmNic.DirectNic.ingress("vlan.0")]

    guest_customization = AhvVmGC.CloudInit(
        config={
            "users": [
                {
                    "name": CENTOS_USER,
                    "ssh-authorized-keys": ["@@{INSTANCE_PUBLIC_KEY}@@"],
                    "sudo": ["ALL=(ALL) NOPASSWD:ALL"],
                }
            ]
        }
    )


class NginxVm(AhvVm):

    resources = NginxVmResources
    categories = {"AppFamily": "Demo", "AppType": "Default"}


class NginxSubstrate(Substrate):
    """Nginx Substrate"""

    provider_type = "AHV_VM"
    provider_spec = NginxVm


class NginxDeployment(Deployment):
    """Nginx Deployment"""

    packages = [ref(NginxPackage)]
    substrate = ref(NginxSubstrate)


class DefaultProfile(Profile):

    # Deployments under this profile
    deployments = [NginxDeployment]

    # Profile Variables
    INSTANCE_PUBLIC_KEY = Variable.Simple(read_local_file(
        os.path.join("keys",
                     "centos_pub")), runtime=True)
    HOSTNAME = Variable.Simple("nginx-server", runtime=True)
    ENABLE_ACCESS_LOG = Variable.WithOptions.Predefined.string(
        ["yes", "no"], default="no", is_mandatory=True, runtime=True
    )
    STATIC_EXPIRATION_DAYS = Variable.Simple("365", runtime=True)


class NginxBlueprint(Blueprint):
    """
    Sample blueprint created with the Nutanix Calm DSL.
    This blueprint will deploy Nginx and PHP 7.2 based on
    some best-practice parameters.
    """

    credentials = [CentosCred]
    services = [NginxService]
    packages = [NginxPackage, CentosPackage]
    substrates = [NginxSubstrate]
    profiles = [DefaultProfile]
